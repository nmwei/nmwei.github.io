1:"$Sreact.fragment"
2:I[1478,["545","static/chunks/c16f53c3-5b47b7f1ae12d8f6.js","874","static/chunks/874-7cca39d2e0ddd8b8.js","430","static/chunks/430-27ea613f983ffbaf.js","177","static/chunks/app/layout-4f2fc603b9b897e8.js"],"ThemeProviders"]
3:I[9243,["545","static/chunks/c16f53c3-5b47b7f1ae12d8f6.js","874","static/chunks/874-7cca39d2e0ddd8b8.js","430","static/chunks/430-27ea613f983ffbaf.js","177","static/chunks/app/layout-4f2fc603b9b897e8.js"],""]
4:I[7392,["545","static/chunks/c16f53c3-5b47b7f1ae12d8f6.js","874","static/chunks/874-7cca39d2e0ddd8b8.js","430","static/chunks/430-27ea613f983ffbaf.js","177","static/chunks/app/layout-4f2fc603b9b897e8.js"],"KBarSearchProvider"]
5:I[6874,["874","static/chunks/874-7cca39d2e0ddd8b8.js","63","static/chunks/63-2b4206848ffc60fb.js","909","static/chunks/app/blog/%5B...slug%5D/page-28d33eed3f173442.js"],""]
6:I[4159,["545","static/chunks/c16f53c3-5b47b7f1ae12d8f6.js","874","static/chunks/874-7cca39d2e0ddd8b8.js","430","static/chunks/430-27ea613f983ffbaf.js","177","static/chunks/app/layout-4f2fc603b9b897e8.js"],"KBarButton"]
7:I[1762,["545","static/chunks/c16f53c3-5b47b7f1ae12d8f6.js","874","static/chunks/874-7cca39d2e0ddd8b8.js","430","static/chunks/430-27ea613f983ffbaf.js","177","static/chunks/app/layout-4f2fc603b9b897e8.js"],"default"]
8:I[7298,["545","static/chunks/c16f53c3-5b47b7f1ae12d8f6.js","874","static/chunks/874-7cca39d2e0ddd8b8.js","430","static/chunks/430-27ea613f983ffbaf.js","177","static/chunks/app/layout-4f2fc603b9b897e8.js"],"default"]
9:I[7555,[],""]
a:I[1295,[],""]
c:I[9665,[],"OutletBoundary"]
f:I[9665,[],"ViewportBoundary"]
11:I[9665,[],"MetadataBoundary"]
13:I[6614,[],""]
:HL["/_next/static/media/7cba1811e3c25a15-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/f71128b9ac16cc11.css","style"]
:HL["/_next/static/css/5fa3e5bae12b17db.css","style"]
:HL["/_next/static/css/206c8cd9f1135cc1.css","style"]
0:{"P":null,"b":"zD_bYF5SZMVS-oUQR0xRK","p":"","c":["","blog","%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F","%E3%80%8A%E9%87%8D%E6%9E%84%E3%80%8B--%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9D%8F%E5%91%B3%E9%81%93"],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/%E3%80%8A%E9%87%8D%E6%9E%84%E3%80%8B--%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9D%8F%E5%91%B3%E9%81%93","c"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f71128b9ac16cc11.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/5fa3e5bae12b17db.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"zh-cn","className":"__variable_bc0dcf scroll-smooth","suppressHydrationWarning":true,"children":[["$","link",null,{"rel":"apple-touch-icon","sizes":"76x76","href":"/static/favicons/apple-touch-icon.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/static/favicons/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/static/favicons/favicon-16x16.png"}],["$","link",null,{"rel":"manifest","href":"/static/favicons/site.webmanifest"}],["$","link",null,{"rel":"mask-icon","href":"/static/favicons/safari-pinned-tab.svg","color":"#5bbad5"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#000000"}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: light)","content":"#fff"}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: dark)","content":"#000"}],["$","link",null,{"rel":"alternate","type":"application/rss+xml","href":"/feed.xml"}],["$","body",null,{"className":"bg-white pl-[calc(100vw-100%)] text-black antialiased dark:bg-gray-950 dark:text-white","children":["$","$L2",null,{"children":[["$undefined","$undefined","$undefined",["$","$L3",null,{"async":true,"defer":true,"src":"https://analytics.umami.is/script.js"}],"$undefined","$undefined"],["$","section",null,{"className":"mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0","children":[["$","$L4",null,{"kbarConfig":{"searchDocumentsPath":"/search.json"},"children":[["$","header",null,{"className":"flex items-center w-full bg-white dark:bg-gray-950 justify-between py-10","children":[["$","$L5",null,{"className":"break-words","href":"/","aria-label":"我的博客","children":["$","div",null,{"className":"flex items-center justify-between","children":[["$","div",null,{"className":"mr-3","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","xmlnsXlink":"http://www.w3.org/1999/xlink","width":53.87,"height":43.61,"viewBox":"344.564 330.278 111.737 91.218","children":[["$","defs",null,{"children":[["$","linearGradient",null,{"id":"logo_svg__b","x1":420.97,"x2":420.97,"y1":331.28,"y2":418.5,"gradientUnits":"userSpaceOnUse","children":[["$","stop",null,{"offset":"0%","style":{"stopColor":"#06b6d4","stopOpacity":1}}],["$","stop",null,{"offset":"100%","style":{"stopColor":"#67e8f9","stopOpacity":1}}]]}],["$","linearGradient",null,{"id":"logo_svg__d","x1":377.89,"x2":377.89,"y1":331.28,"y2":418.5,"gradientUnits":"userSpaceOnUse","children":[["$","stop",null,{"offset":"0%","style":{"stopColor":"#06b6d4","stopOpacity":1}}],["$","stop",null,{"offset":"100%","style":{"stopColor":"#67e8f9","stopOpacity":1}}]]}],["$","path",null,{"id":"logo_svg__a","d":"M453.3 331.28v28.57l-64.66 58.65v-30.08z"}],["$","path",null,{"id":"logo_svg__c","d":"M410.23 331.28v28.57l-64.67 58.65v-30.08z"}]]}],["$","use",null,{"xlinkHref":"#logo_svg__a","fill":"url(#logo_svg__b)"}],["$","use",null,{"xlinkHref":"#logo_svg__c","fill":"url(#logo_svg__d)"}]]}]}],["$","div",null,{"className":"hidden h-6 text-2xl font-semibold sm:block","children":"我的博客"}]]}]}],["$","div",null,{"className":"flex items-center space-x-4 leading-5 sm:-mr-6 sm:space-x-6","children":[["$","div",null,{"className":"no-scrollbar hidden max-w-40 items-center gap-x-4 overflow-x-auto sm:flex md:max-w-72 lg:max-w-96","children":[["$","$L5","博客",{"className":"hover:text-primary-500 dark:hover:text-primary-400 m-1 font-medium text-gray-900 dark:text-gray-100","href":"/blog","children":"博客"}],["$","$L5","标签",{"className":"hover:text-primary-500 dark:hover:text-primary-400 m-1 font-medium text-gray-900 dark:text-gray-100","href":"/tags","children":"标签"}],["$","$L5","项目",{"className":"hover:text-primary-500 dark:hover:text-primary-400 m-1 font-medium text-gray-900 dark:text-gray-100","href":"/projects","children":"项目"}],["$","$L5","关于",{"className":"hover:text-primary-500 dark:hover:text-primary-400 m-1 font-medium text-gray-900 dark:text-gray-100","href":"/about","children":"关于"}]]}],["$","$L6",null,{"aria-label":"Search","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","fill":"none","viewBox":"0 0 24 24","strokeWidth":1.5,"stroke":"currentColor","className":"hover:text-primary-500 dark:hover:text-primary-400 h-6 w-6 text-gray-900 dark:text-gray-100","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","d":"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"}]}]}],["$","$L7",null,{}],["$","$L8",null,{}]]}]]}],["$","main",null,{"className":"mb-auto","children":["$","$L9",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"flex flex-col items-start justify-start md:mt-24 md:flex-row md:items-center md:justify-center md:space-x-6","children":[["$","div",null,{"className":"space-x-2 pt-6 pb-8 md:space-y-5","children":["$","h1",null,{"className":"text-6xl leading-9 font-extrabold tracking-tight text-gray-900 md:border-r-2 md:px-6 md:text-8xl md:leading-14 dark:text-gray-100","children":"404"}]}],["$","div",null,{"className":"max-w-md","children":[["$","p",null,{"className":"mb-4 text-xl leading-normal font-bold md:text-2xl","children":"Sorry we couldn't find this page."}],["$","p",null,{"className":"mb-8","children":"But dont worry, you can find plenty of other things on our homepage."}],["$","$L5",null,{"className":"focus:shadow-outline-blue inline rounded-lg border border-transparent bg-blue-600 px-4 py-2 text-sm leading-5 font-medium text-white shadow-xs transition-colors duration-150 hover:bg-blue-700 focus:outline-hidden dark:hover:bg-blue-500","href":"/","children":"Back to homepage"}]]}]]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],["$","footer",null,{"children":["$","div",null,{"className":"mt-16 flex flex-col items-center","children":[["$","div",null,{"className":"mb-3 flex space-x-4","children":[["$","a",null,{"className":"text-sm text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"mailto:254060001@qq.com","children":[["$","span",null,{"className":"sr-only","children":"mail"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 20 20","className":"hover:text-primary-500 dark:hover:text-primary-400 fill-current text-gray-700 dark:text-gray-200 h-6 w-6","children":[["$","title",null,{"children":"Mail"}],["$","path",null,{"d":"M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"}],["$","path",null,{"d":"M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"}]]}]]}],["$","a",null,{"className":"text-sm text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://github.com","children":[["$","span",null,{"className":"sr-only","children":"github"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","className":"hover:text-primary-500 dark:hover:text-primary-400 fill-current text-gray-700 dark:text-gray-200 h-6 w-6","children":[["$","title",null,{"children":"GitHub"}],["$","path",null,{"d":"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"}]]}]]}],null,null,null,null,null,null,null,null,null]}],["$","div",null,{"className":"mb-2 flex space-x-2 text-sm text-gray-500 dark:text-gray-400","children":[["$","div",null,{"children":"倪梦威"}],["$","div",null,{"children":" • "}],["$","div",null,{"children":"© 2025"}],["$","div",null,{"children":" • "}],["$","$L5",null,{"className":"break-words","href":"/","children":"我的博客"}]]}],false]}]}]]}]]}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L9",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/%E3%80%8A%E9%87%8D%E6%9E%84%E3%80%8B--%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9D%8F%E5%91%B3%E9%81%93","c"],["$","$1","c",{"children":[null,["$","$L9",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$Lb","$undefined",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/206c8cd9f1135cc1.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$Lc",null,{"children":["$Ld","$Le",null]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","HWbU7Ghm3eGWxNqKToXrq",{"children":[["$","$Lf",null,{"children":"$L10"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],["$","$L11",null,{"children":"$L12"}]]}],false]],"m":"$undefined","G":["$13","$undefined"],"s":false,"S":true}
14:I[1839,["874","static/chunks/874-7cca39d2e0ddd8b8.js","63","static/chunks/63-2b4206848ffc60fb.js","909","static/chunks/app/blog/%5B...slug%5D/page-28d33eed3f173442.js"],"default"]
15:I[1449,["874","static/chunks/874-7cca39d2e0ddd8b8.js","63","static/chunks/63-2b4206848ffc60fb.js","909","static/chunks/app/blog/%5B...slug%5D/page-28d33eed3f173442.js"],"default"]
b:[["$","script",null,{"type":"application/ld+json","dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"headline\":\"《重构》--代码的坏味道\",\"datePublished\":\"2018-10-18T00:00:00.000Z\",\"dateModified\":\"2018-10-18T00:00:00.000Z\",\"description\":\"《重构》--代码的坏味道相关文章\",\"image\":\"/static/images/code-quality.jpg\",\"url\":\"https://nmwei.github.io/blog/代码质量/《重构》--代码的坏味道\",\"author\":[{\"@type\":\"Person\",\"name\":\"倪梦威\"}]}"}}],["$","section",null,{"className":"mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0","children":[["$","$L14",null,{}],["$","article",null,{"children":["$","div",null,{"children":[["$","header",null,{"children":["$","div",null,{"className":"space-y-1 border-b border-gray-200 pb-10 text-center dark:border-gray-700","children":[["$","dl",null,{"children":["$","div",null,{"children":[["$","dt",null,{"className":"sr-only","children":"Published on"}],["$","dd",null,{"className":"text-base leading-6 font-medium text-gray-500 dark:text-gray-400","children":["$","time",null,{"dateTime":"2018-10-18T00:00:00.000Z","children":"2018年10月18日"}]}]]}]}],["$","div",null,{"children":["$","h1",null,{"className":"text-3xl leading-9 font-extrabold tracking-tight text-gray-900 sm:text-4xl sm:leading-10 md:text-5xl md:leading-14 dark:text-gray-100","children":"《重构》--代码的坏味道"}]}]]}]}],["$","div",null,{"className":"grid-rows-[auto_1fr] divide-y divide-gray-200 pb-8 xl:divide-y-0 dark:divide-gray-700","children":[["$","div",null,{"className":"divide-y divide-gray-200 xl:col-span-3 xl:row-span-2 xl:pb-0 dark:divide-gray-700","children":["$","div",null,{"className":"prose dark:prose-invert max-w-none pt-10 pb-8","children":[["$","p",null,{"children":["$","a",null,{"className":"break-words","target":"_blank","rel":"noopener noreferrer","href":"https://github.com/nmwei/clean-code/blob/master/note/note.md","children":"如果尿布臭了，就换掉它。"}]}],["$","h2",null,{"className":"content-header","id":"一-duplicated-code重复代码","children":[["$","a",null,{"className":"break-words","href":"#一-duplicated-code重复代码","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"一. Duplicated Code(重复代码)"]}],["$","ol",null,{"children":[["$","li",null,{"children":"如果你在一个以上的地点看到相同的程序结构，设法将他们合而为一，程序会变得更好。"}],["$","li",null,{"children":["同一个类的两个函数含有相同的表达式，采用",["$","code",null,{"children":"Extract Method"}],"(提炼函数)提炼出重复的代码。"]}],["$","li",null,{"children":["两个互为兄弟的子类含有相同的表达式，首先对两个类都使用",["$","code",null,{"children":"Extract Method"}],"(提炼函数)，然后再对提炼出来的代码使用",["$","code",null,{"children":"Pull Up Method"}],"(函数上移)，将它推入超类。"]}],["$","li",null,{"children":["如果代码之间只是类似，并非完全相同，运用",["$","code",null,{"children":"Extract Method"}],"(提炼函数)将相似部分和差异部分分割开，然后可以运用",["$","code",null,{"children":"Form Template Method"}],"(塑造模板函数)获取一个莫模板方法。"]}],["$","li",null,{"children":["如果有些函数以不同算法做相同的事情，你可与选择其中较清晰的一个，使用",["$","code",null,{"children":"Substitute Algorithm"}],"(替换算法)将其他函数的算法替换掉。"]}],["$","li",null,{"children":["如果两个毫不相关的类出现重复代码，应考虑对其中一个使用",["$","code",null,{"children":"Extract Class"}],"(提炼类)，将重复代码提炼到一个独立的类中。"]}],["$","li",null,{"children":"重复代码所在的函数应该只属于某一个类，另一个类调用它；或者应该属于第三个类，另两个类引用这第三个类。决定重复函数的最合适位置，确保只有一份。"}]]}],["$","h2",null,{"className":"content-header","id":"二-long-method过长函数","children":[["$","a",null,{"className":"break-words","href":"#二-long-method过长函数","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"二. Long Method(过长函数)"]}],["$","ol",null,{"children":[["$","li",null,{"children":"拥有短函数的对象会活的比较好、比较长。"}],["$","li",null,{"children":["绝大部分情况下，要把函数变小，只需要使用",["$","code",null,{"children":"Extract Method"}],"(提炼函数)。"]}],["$","li",null,{"children":["使用",["$","code",null,{"children":"Extract Method"}],"(提炼函数)时，如果函数中有个别参数和临时变量，可以把他们当做参数，传递给被提炼出来的新函数。"]}],["$","li",null,{"children":["如果被提炼函数内有大量的参数和临时变量，可以运用",["$","code",null,{"children":"Replace Temp with Query"}],"(以查询取代临时变量)来消除这些临时元素。"]}],["$","li",null,{"children":["使用",["$","code",null,{"children":"Introduce Parameter Object"}],"(引入参数对象)可以将过长的参数列变得更简洁一些。"]}],["$","li",null,{"children":["如果被提炼函数仍然有太多临时变量和参数，可以使用",["$","code",null,{"children":"Replace Method with Method Object"}],"(以函数对象取代函数)。"]}],["$","li",null,{"children":"注释通常能够指出应该被提炼的代码。就算只有一行代码，如果它需要以注释来说明，那也值得将它提炼到独立函数去。"}],["$","li",null,{"children":["你可以使用",["$","code",null,{"children":"Decompose Conditional"}],"(分解条件表达式)处理条件表达式。"]}],["$","li",null,{"children":"你应该将循环和其内的代码提炼到一个独立的函数中。"}]]}],["$","h2",null,{"className":"content-header","id":"三-large-class过大的类","children":[["$","a",null,{"className":"break-words","href":"#三-large-class过大的类","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"三. Large Class(过大的类)"]}],["$","ol",null,{"children":[["$","li",null,{"children":"如果想利用单个类做太多事情，其内往往就会出现太多实例变量。一旦如此，重复代码也就接踵而至了。"}],["$","li",null,{"children":["可以运用",["$","code",null,{"children":"Extract Class"}],"(提炼类)将几个彼此相关的实例变量一起提炼至新类内。如果被提炼出的类适合作为一个子类，使用",["$","code",null,{"children":"Extract Subclass"}],"(提炼子类)往往比较简单。"]}],["$","li",null,{"children":["有时候类并非所有时刻都使用所有实例变量。你可以多次使用",["$","code",null,{"children":"Extract Class"}],"(提炼类)或",["$","code",null,{"children":"Extract Subclass"}],"(提炼子类)。"]}],["$","li",null,{"children":"和“太多实例变量”一样，类内如果有太多代码，也是代码重复、混乱并最终走向死亡的源头。"}],["$","li",null,{"children":"如果有五个“百行函数”，他们之中有很多代码相同，那么你也许可以把他们变成五个“十行函数”和十个提炼出的“双行函数”。"}],["$","li",null,{"children":["和“太多实例变量”一样，类内如果有太多代码，往往也适合使用",["$","code",null,{"children":"Extract Class"}],"(提炼类)或",["$","code",null,{"children":"Extract Subclass"}],"(提炼子类)。"]}],["$","li",null,{"children":["如果你的过大的类是一个",["$","code",null,{"children":"GUI"}],"类，你可能需要把数据和行为移到一个独立的类中。"]}]]}],["$","h2",null,{"className":"content-header","id":"四-long-parameter-list过长参数列","children":[["$","a",null,{"className":"break-words","href":"#四-long-parameter-list过长参数列","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"四. Long Parameter List(过长参数列)"]}],["$","ol",null,{"children":[["$","li",null,{"children":"太长的参数列难以理解，太多参数会造成前后不一致、不易使用。"}],["$","li",null,{"children":"刚开始学习编程时，老师教我们：把函数所需的所有东西都以参数传递进去。这可以理解，因为除此之外只能选择全局数据，而全局数据是邪恶的东西。"}],["$","li",null,{"children":"对象技术改变了这一情况：如果你手上没有所需的东西，总可以叫另一个对象给你。有了对象，函数需要的东西多半可以在函数的宿主类中找到。面向对象程序中的函数，其参数列通常比在传统程序中短的多。"}],["$","li",null,{"children":["如果向已有的对象发出一条请求就可以取代一个参数，那么你应该激活重构手法",["$","code",null,{"children":"Replace Parameter with Method"}],"(以函数取代参数)。"]}],["$","li",null,{"children":["你还可以运用",["$","code",null,{"children":"Preserve Whole Object"}],"(保持对象完整)将来自同一对象的一堆数据收集起来，并以该对象替换他们。"]}],["$","li",null,{"children":["如果某些数据缺乏合理的对象归属，可使用",["$","code",null,{"children":"Introduce Parameter Object"}],"(引入参数对象)为他们制造出一个“参数对象”。"]}],["$","li",null,{"children":"这里有一个例外：有时候你明显不希望造成“被调用对象”与“较大对象”间的某种依赖关系。这时候将数据从对象拆解出来单独作为参数，也很合情合理。但是请权衡其所引发的代价。"}]]}],["$","h2",null,{"className":"content-header","id":"五-divergent-change发散式变化","children":[["$","a",null,{"className":"break-words","href":"#五-divergent-change发散式变化","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"五. Divergent Change(发散式变化)"]}],["$","ol",null,{"children":[["$","li",null,{"children":["我们希望软件能够更容易被修改。一旦需要修改，我们希望能够",["$","strong",null,{"children":"跳到系统的某一点，只在该处做修改"}],"。"]}],["$","li",null,{"children":["如果某个类经常因为不同的原因在不同的方向上发生变化， ",["$","code",null,{"children":"Divergent Change"}],"(发散式变化)就出现了。"]}],["$","li",null,{"children":["针对某一外界变化的所有相应修改，都只应该发生在单一类中。为此，你应该找出某特定原因而造成的所有变化，运用",["$","code",null,{"children":"Extract Class"}],"(提炼类)将他们提炼到另一个类中。"]}]]}],["$","h2",null,{"className":"content-header","id":"六-shotgun-surgery散弹式修改","children":[["$","a",null,{"className":"break-words","href":"#六-shotgun-surgery散弹式修改","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"六. Shotgun Surgery(散弹式修改)"]}],["$","ol",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":"Shotgun Surgery"}],"(散弹式修改)类似",["$","code",null,{"children":"Divergent Change"}],"(发散式变化)，但恰恰相反。"]}],["$","li",null,{"children":["如果每遇到某种变化，你都必须在许多不同的类内做出许多小修改，你所面临的坏味道就是",["$","code",null,{"children":"Shotgun Surgery"}],"(散弹式修改)。"]}],["$","li",null,{"children":"如果需要修改的代码散布四处，你不但很难找到他们，也很容易忘记某个重要的修改。"}],["$","li",null,{"children":["你应该使用",["$","code",null,{"children":"Move Method"}],"(搬移函数)和",["$","code",null,{"children":"Move Field"}],"(搬移字段)把所有需要修改的代码放进同一个类。"]}],["$","li",null,{"children":["如果眼下没有合适的类可以安置这些代码，就创造一个。通常可以运用",["$","code",null,{"children":"Inline Class"}],"(将类内联化)把一系列相关行为放进同一个类。"]}],["$","li",null,{"children":[["$","code",null,{"children":"Divergent Change"}],"(发散式变化) 是指“一个类受多种变化的影响”。",["$","code",null,{"children":"Shotgun Surgery"}],"(散弹式修改)则是指“一种变化引起多个类响应修改”。这两种情况你都希望整理代码，使“外界变化”与“需要修改的类”趋于一一对应。"]}]]}],["$","h2",null,{"className":"content-header","id":"七-feature-envy依恋情节","children":[["$","a",null,{"className":"break-words","href":"#七-feature-envy依恋情节","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"七. Feature Envy(依恋情节)"]}],["$","ol",null,{"children":[["$","li",null,{"children":"对象技术即是一种“将数据和对数据的操作行为包装在一起”的技术。"}],["$","li",null,{"children":[["$","code",null,{"children":"Feature Envy"}],"(依恋情节)指的是：函数对某个类的兴趣高过对自己所处类的兴趣。"]}],["$","li",null,{"children":["我们常常看到某个函数为了计算某个值，从另一个对象那儿调用了几乎半打的取值函数。此时，你应该使用",["$","code",null,{"children":"Move Method"}],"(搬移函数)把它移到它该去的地方。"]}],["$","li",null,{"children":["先使用",["$","code",null,{"children":"Extract Method"}],"(提炼函数)，将这个函数分解为数个较小函数并分别置于不同地点，有助于",["$","code",null,{"children":"Move Method"}],"(搬移函数)重构手法的实施。"]}],["$","li",null,{"children":"如果一个函数用到几个类的功能，那么需要判断哪个类拥有最多被此函数使用的数据，然后就把这个函数和那些数据摆在一起。"}]]}],["$","h2",null,{"className":"content-header","id":"八-data-clumps数据泥团","children":[["$","a",null,{"className":"break-words","href":"#八-data-clumps数据泥团","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"八. Data Clumps(数据泥团)"]}],["$","ol",null,{"children":[["$","li",null,{"children":"数据项就像小孩子，喜欢成群结队地待在一块儿。这些总是绑在一起出现的数据真应该拥有属于它们自己的对象。"}],["$","li",null,{"children":["首先运用",["$","code",null,{"children":"Extract Class"}],"(提炼类)将他们提炼到一个独立对象中，然后将注意力转移到函数签名上，运用",["$","code",null,{"children":"Introduce Parameter Object"}],"(引入参数对象)或",["$","code",null,{"children":"Preserve Whole Object"}],"(保持对象完整性)为它减肥。这样做可以缩短参数列，简化函数调用。"]}],["$","li",null,{"children":"如果删掉众多数据中的一项，其他数据不再有意义，那么他们应该以一个对象的形式存在。"}],["$","li",null,{"children":"一旦拥有新对象，你就有机会让程序散发出一种芬芳。可以将适当的程序行为移至新类。不必太久，所有的类都将在他们的小小社会中发挥价值。"}]]}],["$","h2",null,{"className":"content-header","id":"九-primitive-obsession基类类型偏执","children":[["$","a",null,{"className":"break-words","href":"#九-primitive-obsession基类类型偏执","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"九. Primitive Obsession(基类类型偏执)"]}],["$","ol",null,{"children":[["$","li",null,{"children":"大多数编程环境都有两种数据：结构类型允许你将数据组织成有意义的形式；基本类型则是构成结构类型的积木块。"}],["$","li",null,{"children":["对象技术的新手通常不愿意在小任务上运用小对象——像是结合数值和币种",["$","code",null,{"children":"money"}],"类、由一个起始值和一个结束值组成的",["$","code",null,{"children":"range"}],"类、电话号码或邮政编码等的特殊字符串。"]}],["$","li",null,{"children":["你可以运用",["$","code",null,{"children":"Replace Data Value with Object"}],"(以对象取代数据值)将原本单独存在的数据值替换为对象，从而走出洞窟，进入炙手可热的对象世界。"]}],["$","li",null,{"children":["如果想要替换的数据值是类型码，而它并不影响行为，则可以运用",["$","code",null,{"children":"Replace Type Code with Class"}],"(以类取代类型码)将它换掉。"]}],["$","li",null,{"children":["如果你有与类型码相关的条件表达式，可运用",["$","code",null,{"children":"Replace Type Code with Subclass"}],"(以子类取代类型码)或",["$","code",null,{"children":"Replace Type Code with State/Strategy"}],"(以",["$","code",null,{"children":"State/Strategy"}],"取代类型码)加以处理。"]}],["$","li",null,{"children":["如果你有一组应该总是被放在一起的字段，可运用",["$","code",null,{"children":"Extract Class"}],"(提炼类)。"]}],["$","li",null,{"children":["如果你在参数列中看到基本类型数据，不妨试试",["$","code",null,{"children":"Introduce Parameter Object"}],"(引入参数对象)。"]}],["$","li",null,{"children":["如果你发现自己正从数组中挑选数据(数组中的元素各自代表不同的东西)，可运用",["$","code",null,{"children":"Replace Array with Object"}],"(以对象取代数组)。"]}]]}],["$","h2",null,{"className":"content-header","id":"十-switch-statementsswitch惊悚现身","children":[["$","a",null,{"className":"break-words","href":"#十-switch-statementsswitch惊悚现身","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"十. Switch Statements(Switch惊悚现身)"]}],["$","ol",null,{"children":[["$","li",null,{"children":["面向对象程序的一个最明显特征就是：少用",["$","code",null,{"children":"switch"}],"语句。从本质上说，",["$","code",null,{"children":"switch"}],"语句的问题在于重复。面向对象中的多态概念可为此带来优雅的解决办法。"]}],["$","li",null,{"children":["使用",["$","code",null,{"children":"Extract Method"}],"(提炼函数)将",["$","code",null,{"children":"switch"}],"语句提炼到一个独立函数中，再以",["$","code",null,{"children":"Move Method"}],"(搬移函数)将它搬移到需要多态性的那个类里。"]}],["$","li",null,{"children":["你必须决定是否使用",["$","code",null,{"children":"Replace Type Code with Subclass"}],"(以子类取代类型码)或",["$","code",null,{"children":"Replace Type Code with State/Strategy"}],"(以",["$","code",null,{"children":"State/Strategy"}],"取代类型码)。一旦这样完成继结构之后，你就可以运用",["$","code",null,{"children":"Replace Conditional with Polymorphism"}],"(以多态取代条件表达式)了。"]}],["$","li",null,{"children":["如果你只是在单一函数中使用",["$","code",null,{"children":"switch"}],"语句，多态就有点杀鸡用牛刀了。这种情况下",["$","code",null,{"children":"Replace Parameter with Explicit Methods"}],"(以明确函数取代参数)是个不错的选择。如果你的选择条件之一是",["$","code",null,{"children":"null"}],"，可以试试",["$","code",null,{"children":"Introduce Null Object"}],"(引入",["$","code",null,{"children":"null"}],"对象)。"]}]]}],["$","h2",null,{"className":"content-header","id":"十一-parallel-inheritance-hierarchies平行继承体系","children":[["$","a",null,{"className":"break-words","href":"#十一-parallel-inheritance-hierarchies平行继承体系","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"十一. Parallel Inheritance Hierarchies(平行继承体系)"]}],["$","ol",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":"Parallel Inheritance Hierarchies"}],"(平行继承体系)其实是",["$","code",null,{"children":"Shotgun Surgery"}],"(散弹式修改)的特殊情况。在这种情况下，每当你为某个类添加一个子类，必须也为另一个类相应增加一个子类。"]}],["$","li",null,{"children":["让一个继承体系的实例引用另一个继承体系的实例。如果再接再厉运用",["$","code",null,{"children":"Move Method"}],"(搬移函数)和",["$","code",null,{"children":"Move Field"}],"(搬移字段)，就可以将引用端的继承体系消弭于无形。"]}]]}],["$","h2",null,{"className":"content-header","id":"十二-lazy-class冗赘类","children":[["$","a",null,{"className":"break-words","href":"#十二-lazy-class冗赘类","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"十二. Lazy Class(冗赘类)"]}],["$","ol",null,{"children":[["$","li",null,{"children":"你创建的每一个类，都得有人去维护它。如果一个类的所得不值其身价，就应该消失。"}],["$","li",null,{"children":["如果某些子类没有做足够的工作，试试",["$","code",null,{"children":"Collapse Hierarchy"}],"(折叠继承体系)。"]}],["$","li",null,{"children":["对于几乎没用的组件，你应该以",["$","code",null,{"children":"Inline Class"}],"(将类内联化)对付他们。"]}]]}],["$","h2",null,{"className":"content-header","id":"十三-speculative-generality夸夸其谈未来性","children":[["$","a",null,{"className":"break-words","href":"#十三-speculative-generality夸夸其谈未来性","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"十三. Speculative Generality(夸夸其谈未来性)"]}],["$","ol",null,{"children":[["$","li",null,{"children":"当有人说“噢，我想我们总有一天需要做这事”，并企图以各式各样的钩子和特殊情况来处理一些非必要的事情，这种坏味道就出现了。"}],["$","li",null,{"children":"如果所有装置都会被用到，那就值得那么做；如果用不到，就不值得。用不上的装置只会挡你的路，所以，把它搬开吧。"}],["$","li",null,{"children":["如果你的某个抽象类其实没有太大作用，请运用",["$","code",null,{"children":"Collapse Hierarchy"}],"(折叠继承体系)。"]}],["$","li",null,{"children":["不必要的委托可运用",["$","code",null,{"children":"Inline Class"}],"(将类内联化)除掉。"]}],["$","li",null,{"children":["如果函数的某些参数未被用上，可对它实施",["$","code",null,{"children":"Remove Parameter"}],"(移除参数)。"]}],["$","li",null,{"children":["如果函数名称带有多余的抽象意味，应该对它实施",["$","code",null,{"children":"Rename Method"}],"(函数改名)，让它更现实一些。"]}]]}],["$","h2",null,{"className":"content-header","id":"十四-temporary-field令人迷惑的暂时字段","children":[["$","a",null,{"className":"break-words","href":"#十四-temporary-field令人迷惑的暂时字段","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"十四. Temporary Field(令人迷惑的暂时字段)"]}],["$","ol",null,{"children":[["$","li",null,{"children":"有时你会看到这样的对象：其内某个实例变量仅为某种特定情况而设。这样的代码让人不宜理解，因为你通常认为对象在所有时候都需要它的所有变量。"}],["$","li",null,{"children":["请使用",["$","code",null,{"children":"Extract Class"}],"(提炼类)给这个可怜的孤儿创造一个家，然后把所有和这个变量相关的代码都放进这个新家。"]}],["$","li",null,{"children":["或许你还可以使用",["$","code",null,{"children":"Introduce Null Object"}],"(引入",["$","code",null,{"children":"Null"}],"对象)在变量不合法的情况下创建一个",["$","code",null,{"children":"Null"}],"对象，从而避免写出条件式代码。"]}],["$","li",null,{"children":["如果类中有一个复杂算法，需要好几个变量，实现者不希望传递一长串参数，所以他把这些参数放进字段中，导致坏味道。这些字段只在使用该算法时才有效，你可以利用",["$","code",null,{"children":"Extract Class"}],"(提炼类)把这些变量和其相关函数提炼到一个独立类中。提炼后的新对象将是一个函数对象。"]}]]}],["$","h2",null,{"className":"content-header","id":"十五-message-chains过度耦合的消息链","children":[["$","a",null,{"className":"break-words","href":"#十五-message-chains过度耦合的消息链","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"十五. Message Chains(过度耦合的消息链)"]}],["$","ol",null,{"children":[["$","li",null,{"children":"如果你看到用户向一个对象请求另一个对象，然后再向后者请求另一个对象，然后再请求另一个对象……这就是消息链。"}],["$","li",null,{"children":["你应该使用",["$","code",null,{"children":"Hide Delegate"}],"(隐藏“委托关系”)。"]}],["$","li",null,{"children":["先观察消息链最终得到的对象时用来干什么的，看看能否以",["$","code",null,{"children":"Extract Method"}],"(提炼函数)把使用该对象的代码提炼到一个独立函数中，再运用",["$","code",null,{"children":"Move Method"}],"(搬移函数)把这个函数推入消息链。"]}]]}],["$","h2",null,{"className":"content-header","id":"十六-middle-man中间人","children":[["$","a",null,{"className":"break-words","href":"#十六-middle-man中间人","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"十六. Middle Man(中间人)"]}],["$","ol",null,{"children":[["$","li",null,{"children":"对象的基本特征之一就是封装——对外部世界隐藏其内部细节。封装往往伴随委托。"}],["$","li",null,{"children":"人们可能过度运用委托。你也许会看到某个类接口有一半的函数都委托给其他类，这样就是过度运用。"}],["$","li",null,{"children":["这时应该使用",["$","code",null,{"children":"Remove Middle Man"}],"(移除中间人)，直接和真正负责的对象打交道。"]}],["$","li",null,{"children":["如果这样“不干实事”的函数只有少数几个，可以运用",["$","code",null,{"children":"Inline Method"}],"(内联函数)把他们放进调用端。"]}],["$","li",null,{"children":["如果这些中间人还要其他行为，可以运用",["$","code",null,{"children":"Replace Delegation with Inheritance"}],"(以继承取代委托)把它变成实责对象的子类，这样你既可以扩展原对象的行为，又不必负担那么多的委托动作。"]}]]}],["$","h2",null,{"className":"content-header","id":"十七-inappropriate-intimacy狎昵关系","children":[["$","a",null,{"className":"break-words","href":"#十七-inappropriate-intimacy狎昵关系","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"十七. Inappropriate Intimacy(狎昵关系)"]}],["$","ol",null,{"children":[["$","li",null,{"children":"有时你会看到两个类过于亲密，花费太多时间去探究彼此的私有成分。如果这发生在两个“人”之间，我们不必做卫道士；但对于类，我们希望他们严守清规。"}],["$","li",null,{"children":["可以采取",["$","code",null,{"children":"Move Method"}],"(搬移函数)和",["$","code",null,{"children":"Move Field"}],"(搬移字段)帮他们划清界限，从而减少狎昵关系。"]}],["$","li",null,{"children":["你也可以看看是否可以运用",["$","code",null,{"children":"Change Bidirectional Association to Unidirectional"}],"(将双向关联改为单向关联)，让其中一个类对另一个斩断情丝。"]}],["$","li",null,{"children":["如果两个类实在是情投意合，可以运用",["$","code",null,{"children":"Extract Class"}],"(提炼类)把两者共同点提炼到一个安全地点，让他们坦荡地使用这个新类。或者也可以尝试运用",["$","code",null,{"children":"Hide Delegate"}],"(隐藏“委托关系”)让另一个类来为他们传递相思情。"]}],["$","li",null,{"children":["继承往往造成过度亲密，因为子类对超类的了解总是超过后者的主观愿望。如果你觉得是该让这个孩子独自生活了，请运用",["$","code",null,{"children":"Replace Inheritance with Delegation"}],"(以委托取代继承)让它离开继承体系。"]}]]}],["$","h2",null,{"className":"content-header","id":"十八-alternative-classes-with-different-interfaces异曲同工的类","children":[["$","a",null,{"className":"break-words","href":"#十八-alternative-classes-with-different-interfaces异曲同工的类","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"十八. Alternative Classes with Different Interfaces(异曲同工的类)"]}],["$","ol",null,{"children":[["$","li",null,{"children":["如果两个函数做同一件事，却有着不同的签名，请运用",["$","code",null,{"children":"Rename Method"}],"(函数改名)根据他们的用途重新命名。"]}],["$","li",null,{"children":["反复运用",["$","code",null,{"children":"Move Method"}],"(搬移函数)将某些行为移入类，直到两者的协议一致为止。如果你必须重复而赘余地移入代码才能完成这些，或许可运用",["$","code",null,{"children":"Extract Superclass"}],"(提炼超类)为自己赎点罪。"]}]]}],["$","h2",null,{"className":"content-header","id":"十九-incomplete-library-class不完美的库类","children":[["$","a",null,{"className":"break-words","href":"#十九-incomplete-library-class不完美的库类","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"十九. Incomplete Library Class(不完美的库类)"]}],["$","ol",null,{"children":[["$","li",null,{"children":"复用常被视为对象的终极目的。许多编程技术都建立在程序库的基础上。"}],["$","li",null,{"children":"库类构筑者没有未卜先知的能力，我们不能因此责怪他们。库往往构造的不够好，而且往往不可能让我们修改其中的类使它完成我们希望完成的工作。"}],["$","li",null,{"children":["如果你只想修改库类的一两个函数，可以运用",["$","code",null,{"children":"Introduce Foreign Method"}],"(引入外加函数)；如果想要添加一大堆额外行为，就得运用",["$","code",null,{"children":"Introduce Local Extension"}],"(引入本地扩展)。"]}]]}],["$","h2",null,{"className":"content-header","id":"二十-data-class幼稚的数据类","children":[["$","a",null,{"className":"break-words","href":"#二十-data-class幼稚的数据类","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"二十. Data Class(幼稚的数据类)"]}],["$","ol",null,{"children":[["$","li",null,{"children":"幼稚的数据类是指：他们拥有一些字段，以及用于访问(读写)这些字段的函数，除此之外一无长物。"}],["$","li",null,{"children":"这样的类只是一种不会说话的数据容器，他们几乎一定被其他类过分细锁地操纵着。"}],["$","li",null,{"children":["你应该运用",["$","code",null,{"children":"Encapsulate Collection"}],"(封装集合)把他们封装起来。对于那些不该被其他类修改的字段，请运用",["$","code",null,{"children":"Remove Setting Method"}],"(移除设值函数)。"]}],["$","li",null,{"children":["找出这些取值/设值函数被其他类运用的地点。尝试",["$","code",null,{"children":"Move Method"}],"(搬移函数)把那些调用行为搬移到",["$","code",null,{"children":"Data Class"}],"(幼稚的数据类)来。如果无法搬移整个函数，就运用",["$","code",null,{"children":"Extract Method"}],"(提炼函数)产生一个可被搬移的函数。不久以后你就可以运用",["$","code",null,{"children":"Hide Method"}],"(隐藏函数)把这些取值/设置函数隐藏起来了。"]}],["$","li",null,{"children":[["$","code",null,{"children":"Data Class"}],"(幼稚的数据类)就像小孩子。作为一个起点很好，但若要让它们像成熟的对象那样参与整个系统的工作，它们就必须承担一定责任。"]}]]}],["$","h2",null,{"className":"content-header","id":"二十一-refused-bequest被拒绝的遗赠","children":[["$","a",null,{"className":"break-words","href":"#二十一-refused-bequest被拒绝的遗赠","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"二十一. Refused Bequest(被拒绝的遗赠)"]}],["$","ol",null,{"children":[["$","li",null,{"children":"子类应该继承超类的函数和数据。但如果他们得到所有礼物，却只从中挑选几样来玩！又该怎么办呢？"}],["$","li",null,{"children":["按传统做法，你需要为这个子类新建一个兄弟类，再运用",["$","code",null,{"children":"Push Down Method"}],"(函数下移)和",["$","code",null,{"children":"Push Down Field"}],"(字段下移)把所有用不到的函数从超类下推给那个兄弟。这样，超类就只持有所有子类共享的东西。"]}],["$","li",null,{"children":["我们不建议你胡乱修改继承体系，应该运用",["$","code",null,{"children":"Replace Inheritance with Delegation"}],"(以委托取代继承)来达到目的。"]}]]}],["$","h2",null,{"className":"content-header","id":"二十二-comments过多的注释","children":[["$","a",null,{"className":"break-words","href":"#二十二-comments过多的注释","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"二十二. Comments(过多的注释)"]}],["$","ol",null,{"children":[["$","li",null,{"children":"注释本身不是一种坏味道，事实上他们还是一种香味呢。"}],["$","li",null,{"children":"有时候，注释之所以存在乃是因为代码很糟糕。把注释当做除臭剂是一种坏味道。"}],["$","li",null,{"children":"很多时候，注释可以帮助我们找到代码的坏味道。找到坏味道之后，我们首先应该以各种重构手法把坏味道去除。完成之后我们常常会发现：注释已经变得多余了，因为代码已经清晰说明了这一切。"}],["$","li",null,{"children":["如果你需要注释来解释一块代码做了什么，试试",["$","code",null,{"children":"Extract Method"}],"(提炼函数)；如果函数已经提炼出来，但还是需要注释来解释其行为，试试",["$","code",null,{"children":"Rename Method"}],"(函数改名)；如果你需要注释说明某些系统的需求规格，试试",["$","code",null,{"children":"Introduce Assertion"}],"(引入断言)。"]}],["$","li",null,{"children":"当你感觉需要撰写注释时，请先尝试重构，试着让所有注释都变得多余。"}],["$","li",null,{"children":"注释应该用来记述将来的打算、标记你并无十足把握的区域。你可以在注释里写下自己“为什么做某某事”。这类信息可以帮助将来的修改者，尤其是那些健忘的家伙。"}]]}]]}]}],["$","div",null,{"className":"pt-6 pb-6 text-center text-gray-700 dark:text-gray-300","id":"comment","children":["$","$L15",null,{"slug":"代码质量/《重构》--代码的坏味道"}]}],["$","footer",null,{"children":["$","div",null,{"className":"flex flex-col text-sm font-medium sm:flex-row sm:justify-between sm:text-base","children":[["$","div",null,{"className":"pt-4 xl:pt-8","children":["$","$L5",null,{"className":"text-primary-500 hover:text-primary-600 dark:hover:text-primary-400","href":"/blog/代码质量/《重构》--重构入门","aria-label":"Previous post: 《重构》--重构入门","children":["← ","《重构》--重构入门"]}]}],["$","div",null,{"className":"pt-4 xl:pt-8","children":["$","$L5",null,{"className":"text-primary-500 hover:text-primary-600 dark:hover:text-primary-400","href":"/blog/代码质量/《重构》--重新组织数据","aria-label":"Next post: 《重构》--重新组织数据","children":["《重构》--重新组织数据"," →"]}]}]]}]}]]}]]}]}]]}]]
10:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
d:null
e:null
12:[["$","title","0",{"children":"《重构》--代码的坏味道 | 我的博客"}],["$","meta","1",{"name":"description","content":"《重构》--代码的坏味道相关文章"}],["$","meta","2",{"name":"robots","content":"index, follow"}],["$","meta","3",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","4",{"rel":"canonical","href":"https://nmwei.github.io/blog/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/%E3%80%8A%E9%87%8D%E6%9E%84%E3%80%8B--%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9D%8F%E5%91%B3%E9%81%93"}],["$","link","5",{"rel":"alternate","type":"application/rss+xml","href":"https://nmwei.github.io/feed.xml"}],["$","meta","6",{"property":"og:title","content":"《重构》--代码的坏味道"}],["$","meta","7",{"property":"og:description","content":"《重构》--代码的坏味道相关文章"}],["$","meta","8",{"property":"og:url","content":"https://nmwei.github.io/blog/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/%E3%80%8A%E9%87%8D%E6%9E%84%E3%80%8B--%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9D%8F%E5%91%B3%E9%81%93"}],["$","meta","9",{"property":"og:site_name","content":"我的博客"}],["$","meta","10",{"property":"og:locale","content":"en_US"}],["$","meta","11",{"property":"og:image","content":"https://nmwei.github.io/static/images/code-quality.jpg"}],["$","meta","12",{"property":"og:type","content":"article"}],["$","meta","13",{"property":"article:published_time","content":"2018-10-18T00:00:00.000Z"}],["$","meta","14",{"property":"article:modified_time","content":"2018-10-18T00:00:00.000Z"}],["$","meta","15",{"property":"article:author","content":"倪梦威"}],["$","meta","16",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","17",{"name":"twitter:title","content":"《重构》--代码的坏味道"}],["$","meta","18",{"name":"twitter:description","content":"《重构》--代码的坏味道相关文章"}],["$","meta","19",{"name":"twitter:image","content":"https://nmwei.github.io/static/images/code-quality.jpg"}]]
