1:"$Sreact.fragment"
2:I[1478,["545","static/chunks/c16f53c3-5b47b7f1ae12d8f6.js","874","static/chunks/874-7cca39d2e0ddd8b8.js","430","static/chunks/430-27ea613f983ffbaf.js","177","static/chunks/app/layout-4f2fc603b9b897e8.js"],"ThemeProviders"]
3:I[9243,["545","static/chunks/c16f53c3-5b47b7f1ae12d8f6.js","874","static/chunks/874-7cca39d2e0ddd8b8.js","430","static/chunks/430-27ea613f983ffbaf.js","177","static/chunks/app/layout-4f2fc603b9b897e8.js"],""]
4:I[7392,["545","static/chunks/c16f53c3-5b47b7f1ae12d8f6.js","874","static/chunks/874-7cca39d2e0ddd8b8.js","430","static/chunks/430-27ea613f983ffbaf.js","177","static/chunks/app/layout-4f2fc603b9b897e8.js"],"KBarSearchProvider"]
5:I[6874,["874","static/chunks/874-7cca39d2e0ddd8b8.js","63","static/chunks/63-2b4206848ffc60fb.js","909","static/chunks/app/blog/%5B...slug%5D/page-28d33eed3f173442.js"],""]
6:I[4159,["545","static/chunks/c16f53c3-5b47b7f1ae12d8f6.js","874","static/chunks/874-7cca39d2e0ddd8b8.js","430","static/chunks/430-27ea613f983ffbaf.js","177","static/chunks/app/layout-4f2fc603b9b897e8.js"],"KBarButton"]
7:I[1762,["545","static/chunks/c16f53c3-5b47b7f1ae12d8f6.js","874","static/chunks/874-7cca39d2e0ddd8b8.js","430","static/chunks/430-27ea613f983ffbaf.js","177","static/chunks/app/layout-4f2fc603b9b897e8.js"],"default"]
8:I[7298,["545","static/chunks/c16f53c3-5b47b7f1ae12d8f6.js","874","static/chunks/874-7cca39d2e0ddd8b8.js","430","static/chunks/430-27ea613f983ffbaf.js","177","static/chunks/app/layout-4f2fc603b9b897e8.js"],"default"]
9:I[7555,[],""]
a:I[1295,[],""]
c:I[9665,[],"OutletBoundary"]
f:I[9665,[],"ViewportBoundary"]
11:I[9665,[],"MetadataBoundary"]
13:I[6614,[],""]
:HL["/_next/static/media/7cba1811e3c25a15-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/f71128b9ac16cc11.css","style"]
:HL["/_next/static/css/5fa3e5bae12b17db.css","style"]
:HL["/_next/static/css/206c8cd9f1135cc1.css","style"]
0:{"P":null,"b":"zD_bYF5SZMVS-oUQR0xRK","p":"","c":["","blog","%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F","%E3%80%8AClean-Code%E3%80%8B--%E5%8E%9F%E5%88%99%E3%80%81%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%AE%9E%E8%B7%B5"],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/%E3%80%8AClean-Code%E3%80%8B--%E5%8E%9F%E5%88%99%E3%80%81%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%AE%9E%E8%B7%B5","c"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f71128b9ac16cc11.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/5fa3e5bae12b17db.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"zh-cn","className":"__variable_bc0dcf scroll-smooth","suppressHydrationWarning":true,"children":[["$","link",null,{"rel":"apple-touch-icon","sizes":"76x76","href":"/static/favicons/apple-touch-icon.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"32x32","href":"/static/favicons/favicon-32x32.png"}],["$","link",null,{"rel":"icon","type":"image/png","sizes":"16x16","href":"/static/favicons/favicon-16x16.png"}],["$","link",null,{"rel":"manifest","href":"/static/favicons/site.webmanifest"}],["$","link",null,{"rel":"mask-icon","href":"/static/favicons/safari-pinned-tab.svg","color":"#5bbad5"}],["$","meta",null,{"name":"msapplication-TileColor","content":"#000000"}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: light)","content":"#fff"}],["$","meta",null,{"name":"theme-color","media":"(prefers-color-scheme: dark)","content":"#000"}],["$","link",null,{"rel":"alternate","type":"application/rss+xml","href":"/feed.xml"}],["$","body",null,{"className":"bg-white pl-[calc(100vw-100%)] text-black antialiased dark:bg-gray-950 dark:text-white","children":["$","$L2",null,{"children":[["$undefined","$undefined","$undefined",["$","$L3",null,{"async":true,"defer":true,"src":"https://analytics.umami.is/script.js"}],"$undefined","$undefined"],["$","section",null,{"className":"mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0","children":[["$","$L4",null,{"kbarConfig":{"searchDocumentsPath":"/search.json"},"children":[["$","header",null,{"className":"flex items-center w-full bg-white dark:bg-gray-950 justify-between py-10","children":[["$","$L5",null,{"className":"break-words","href":"/","aria-label":"我的博客","children":["$","div",null,{"className":"flex items-center justify-between","children":[["$","div",null,{"className":"mr-3","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","xmlnsXlink":"http://www.w3.org/1999/xlink","width":53.87,"height":43.61,"viewBox":"344.564 330.278 111.737 91.218","children":[["$","defs",null,{"children":[["$","linearGradient",null,{"id":"logo_svg__b","x1":420.97,"x2":420.97,"y1":331.28,"y2":418.5,"gradientUnits":"userSpaceOnUse","children":[["$","stop",null,{"offset":"0%","style":{"stopColor":"#06b6d4","stopOpacity":1}}],["$","stop",null,{"offset":"100%","style":{"stopColor":"#67e8f9","stopOpacity":1}}]]}],["$","linearGradient",null,{"id":"logo_svg__d","x1":377.89,"x2":377.89,"y1":331.28,"y2":418.5,"gradientUnits":"userSpaceOnUse","children":[["$","stop",null,{"offset":"0%","style":{"stopColor":"#06b6d4","stopOpacity":1}}],["$","stop",null,{"offset":"100%","style":{"stopColor":"#67e8f9","stopOpacity":1}}]]}],["$","path",null,{"id":"logo_svg__a","d":"M453.3 331.28v28.57l-64.66 58.65v-30.08z"}],["$","path",null,{"id":"logo_svg__c","d":"M410.23 331.28v28.57l-64.67 58.65v-30.08z"}]]}],["$","use",null,{"xlinkHref":"#logo_svg__a","fill":"url(#logo_svg__b)"}],["$","use",null,{"xlinkHref":"#logo_svg__c","fill":"url(#logo_svg__d)"}]]}]}],["$","div",null,{"className":"hidden h-6 text-2xl font-semibold sm:block","children":"我的博客"}]]}]}],["$","div",null,{"className":"flex items-center space-x-4 leading-5 sm:-mr-6 sm:space-x-6","children":[["$","div",null,{"className":"no-scrollbar hidden max-w-40 items-center gap-x-4 overflow-x-auto sm:flex md:max-w-72 lg:max-w-96","children":[["$","$L5","博客",{"className":"hover:text-primary-500 dark:hover:text-primary-400 m-1 font-medium text-gray-900 dark:text-gray-100","href":"/blog","children":"博客"}],["$","$L5","标签",{"className":"hover:text-primary-500 dark:hover:text-primary-400 m-1 font-medium text-gray-900 dark:text-gray-100","href":"/tags","children":"标签"}],["$","$L5","项目",{"className":"hover:text-primary-500 dark:hover:text-primary-400 m-1 font-medium text-gray-900 dark:text-gray-100","href":"/projects","children":"项目"}],["$","$L5","关于",{"className":"hover:text-primary-500 dark:hover:text-primary-400 m-1 font-medium text-gray-900 dark:text-gray-100","href":"/about","children":"关于"}]]}],["$","$L6",null,{"aria-label":"Search","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","fill":"none","viewBox":"0 0 24 24","strokeWidth":1.5,"stroke":"currentColor","className":"hover:text-primary-500 dark:hover:text-primary-400 h-6 w-6 text-gray-900 dark:text-gray-100","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","d":"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"}]}]}],["$","$L7",null,{}],["$","$L8",null,{}]]}]]}],["$","main",null,{"className":"mb-auto","children":["$","$L9",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"flex flex-col items-start justify-start md:mt-24 md:flex-row md:items-center md:justify-center md:space-x-6","children":[["$","div",null,{"className":"space-x-2 pt-6 pb-8 md:space-y-5","children":["$","h1",null,{"className":"text-6xl leading-9 font-extrabold tracking-tight text-gray-900 md:border-r-2 md:px-6 md:text-8xl md:leading-14 dark:text-gray-100","children":"404"}]}],["$","div",null,{"className":"max-w-md","children":[["$","p",null,{"className":"mb-4 text-xl leading-normal font-bold md:text-2xl","children":"Sorry we couldn't find this page."}],["$","p",null,{"className":"mb-8","children":"But dont worry, you can find plenty of other things on our homepage."}],["$","$L5",null,{"className":"focus:shadow-outline-blue inline rounded-lg border border-transparent bg-blue-600 px-4 py-2 text-sm leading-5 font-medium text-white shadow-xs transition-colors duration-150 hover:bg-blue-700 focus:outline-hidden dark:hover:bg-blue-500","href":"/","children":"Back to homepage"}]]}]]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}],["$","footer",null,{"children":["$","div",null,{"className":"mt-16 flex flex-col items-center","children":[["$","div",null,{"className":"mb-3 flex space-x-4","children":[["$","a",null,{"className":"text-sm text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"mailto:254060001@qq.com","children":[["$","span",null,{"className":"sr-only","children":"mail"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 20 20","className":"hover:text-primary-500 dark:hover:text-primary-400 fill-current text-gray-700 dark:text-gray-200 h-6 w-6","children":[["$","title",null,{"children":"Mail"}],["$","path",null,{"d":"M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"}],["$","path",null,{"d":"M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"}]]}]]}],["$","a",null,{"className":"text-sm text-gray-500 transition hover:text-gray-600","target":"_blank","rel":"noopener noreferrer","href":"https://github.com","children":[["$","span",null,{"className":"sr-only","children":"github"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","className":"hover:text-primary-500 dark:hover:text-primary-400 fill-current text-gray-700 dark:text-gray-200 h-6 w-6","children":[["$","title",null,{"children":"GitHub"}],["$","path",null,{"d":"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"}]]}]]}],null,null,null,null,null,null,null,null,null]}],["$","div",null,{"className":"mb-2 flex space-x-2 text-sm text-gray-500 dark:text-gray-400","children":[["$","div",null,{"children":"倪梦威"}],["$","div",null,{"children":" • "}],["$","div",null,{"children":"© 2025"}],["$","div",null,{"children":" • "}],["$","$L5",null,{"className":"break-words","href":"/","children":"我的博客"}]]}],false]}]}]]}]]}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L9",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/%E3%80%8AClean-Code%E3%80%8B--%E5%8E%9F%E5%88%99%E3%80%81%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%AE%9E%E8%B7%B5","c"],["$","$1","c",{"children":[null,["$","$L9",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$Lb","$undefined",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/206c8cd9f1135cc1.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$Lc",null,{"children":["$Ld","$Le",null]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","4DqGvfhFZU5pLjt6l73WN",{"children":[["$","$Lf",null,{"children":"$L10"}],["$","meta",null,{"name":"next-size-adjust","content":""}]]}],["$","$L11",null,{"children":"$L12"}]]}],false]],"m":"$undefined","G":["$13","$undefined"],"s":false,"S":true}
14:I[1839,["874","static/chunks/874-7cca39d2e0ddd8b8.js","63","static/chunks/63-2b4206848ffc60fb.js","909","static/chunks/app/blog/%5B...slug%5D/page-28d33eed3f173442.js"],"default"]
15:I[2100,["874","static/chunks/874-7cca39d2e0ddd8b8.js","63","static/chunks/63-2b4206848ffc60fb.js","909","static/chunks/app/blog/%5B...slug%5D/page-28d33eed3f173442.js"],"default"]
16:I[1449,["874","static/chunks/874-7cca39d2e0ddd8b8.js","63","static/chunks/63-2b4206848ffc60fb.js","909","static/chunks/app/blog/%5B...slug%5D/page-28d33eed3f173442.js"],"default"]
b:[["$","script",null,{"type":"application/ld+json","dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"headline\":\"《Clean-Code》--原则、模式和实践\",\"datePublished\":\"2018-12-27T00:00:00.000Z\",\"dateModified\":\"2018-12-27T00:00:00.000Z\",\"description\":\"《Clean-Code》--原则、模式和实践相关文章\",\"image\":\"/static/images/code-quality.jpg\",\"url\":\"https://nmwei.github.io/blog/代码质量/《Clean-Code》--原则、模式和实践\",\"author\":[{\"@type\":\"Person\",\"name\":\"倪梦威\"}]}"}}],["$","section",null,{"className":"mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0","children":[["$","$L14",null,{}],["$","article",null,{"children":["$","div",null,{"children":[["$","header",null,{"children":["$","div",null,{"className":"space-y-1 border-b border-gray-200 pb-10 text-center dark:border-gray-700","children":[["$","dl",null,{"children":["$","div",null,{"children":[["$","dt",null,{"className":"sr-only","children":"Published on"}],["$","dd",null,{"className":"text-base leading-6 font-medium text-gray-500 dark:text-gray-400","children":["$","time",null,{"dateTime":"2018-12-27T00:00:00.000Z","children":"2018年12月27日"}]}]]}]}],["$","div",null,{"children":["$","h1",null,{"className":"text-3xl leading-9 font-extrabold tracking-tight text-gray-900 sm:text-4xl sm:leading-10 md:text-5xl md:leading-14 dark:text-gray-100","children":"《Clean-Code》--原则、模式和实践"}]}]]}]}],["$","div",null,{"className":"grid-rows-[auto_1fr] divide-y divide-gray-200 pb-8 xl:divide-y-0 dark:divide-gray-700","children":[["$","div",null,{"className":"divide-y divide-gray-200 xl:col-span-3 xl:row-span-2 xl:pb-0 dark:divide-gray-700","children":["$","div",null,{"className":"prose dark:prose-invert max-w-none pt-10 pb-8","children":[["$","h1",null,{"className":"content-header","id":"0-内容提要","children":[["$","a",null,{"className":"break-words","href":"#0-内容提要","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"0. 内容提要"]}],["$","ol",null,{"children":[["$","li",null,{"children":"软件质量，不但依赖于架构及项目管理，而且与代码质量紧密相关。"}],["$","li",null,{"children":"代码质量与其整洁度成正比。干净的代码，既在质量上较为可靠，也为后期维护、升级奠定了良好基础。"}],["$","li",null,{"children":"我们往往见不到人们把对细节的关注当作编程艺术的基础要件。我们过早地放弃了在代码上的工作，并不是因为它业已完成，而是因为我们的价值体系关注外在表现甚于关注要交付之物的本质。疏忽最终结出了恶果：坏东西一再出现。"}]]}],["$","h1",null,{"className":"content-header","id":"1-整洁代码","children":[["$","a",null,{"className":"break-words","href":"#1-整洁代码","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"1. 整洁代码"]}],["$","ol",null,{"children":[["$","li",null,{"children":"我们永远抛不掉代码，因为代码呈现了需求的细节。在某些层面上，这些细节无法被忽略或抽象，必须明确之。将需求明确到机器可以执行的细节程度，就是编程要做的事。而这种规约正是代码。"}],["$","li",null,{"children":"即便是人类，倾其全部的直觉和创造力，也造不出满足客户模糊感觉的成功系统来。我们永远无法抛弃必要的精准性——所以代码永存。"}],["$","li",null,{"children":["当时他们赶着推出产品，代码写得乱七八糟。特征越加越多，代码也越来越烂，最后再也没法管理这些代码了。",["$","strong",null,{"children":"是糟糕的代码毁了这家公司。"}]]}],["$","li",null,{"children":"我们趟过代码的水域。我们穿过灌木密布、瀑布暗藏的沼泽地。我们拼命想找到出路，期望有点什么线索能启发我们到底发生了什么事；但目光所及，只是越来越多死气沉沉的代码。"}],["$","li",null,{"children":["我们都曾经瞟一眼自己亲手造成的混乱，决定弃之不顾，走向新一天。我们都曾经看到自己的烂程序居然能运行，然后断言能运行的烂程序总比什么都没有强。我们都曾经说过有朝一日再回头清理。当然，在那些日子里，我们都没听过勒布朗法则：",["$","code",null,{"children":"Later equals naver"}],"。"]}]]}],["$","h2",null,{"className":"content-header","id":"13-混乱的代价","children":[["$","a",null,{"className":"break-words","href":"#13-混乱的代价","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"1.3 混乱的代价"]}],["$","ol",null,{"children":[["$","li",null,{"children":"代码混乱时，对代码的每次修改都影响到其他两三处代码。修改无小事。每次添加或修改代码，都得对那堆扭纹柴了然于心，这样才能往上扔更多的扭纹柴。这团乱麻越来越大，再也无法清理，最后束手无策。"}],["$","li",null,{"children":"假使你是位医生，病人请求你在给他做手术前别洗手，因为那会化太多时间，你会照办吗？医生绝对应该拒绝遵从。医生比病人更了解疾病和感染的风向。医生如果按病人说的办，就是一种不专业的态度。同理，程序员遵从不了解混乱风险的经理的意愿，也是不专业的态度。"}],["$","li",null,{"children":"开发期限的压力并不是制造混乱的理由。制造混乱无助于赶上期限。混乱只会立即拖慢你，叫你错过期限。赶上期限的唯一办法——做得快的唯一办法——就是始终尽可能保持代码整洁。"}],["$","li",null,{"children":"写整洁代码就像是绘画。多数人都知道一幅画是好是坏。但能分辨优劣并不表示懂得绘画。能分辨整洁代码和肮脏代码，也不意味着会写整洁代码！"}],["$","li",null,{"children":"什么是整洁代码？ (1) 优雅和高效的代码。代码逻辑直截了当；尽量减少依赖关系；完善错误处理代码；性能调至最优。整洁的代码只做好一件事。 (2) 糟糕的代码想做太多事，意图混乱、目的含糊。整洁的代码力求集中。每个函数、每个类和每个模块都全神贯注于一事，完全不受四周细节的干扰和污染。 (3) 整洁的代码简单直接，如同优美的散文。整洁的代码从不隐藏设计者的意图，充满了干净利落的抽象和直截了当的控制语句。 (4) 易于阅读和增补；有单元测试和验收测试；有意义的命名；只提供一种而非多种做一件事的途径；尽量少的依赖关系；明确、清晰、简洁的API；代码自身表达清晰。 (5) 能通过所有测试；没有重复代码；体现所有系统所有设计理念；尽量少的实体，比如类、方法、函数等。 (6) 不要重复代码，只做一件事，表达力，小规模抽象。 (7) 如果每个例程都让你感到深合己意，那就是整洁代码。如果代码让编程语言看起来像是专为解决那个问题而存在，就可以称之为漂亮的代码。"}],["$","li",null,{"children":"写新代码时，读与写花费时间的比例超过10:1。既然比例如此之高，我们就想让读的过程变得轻松，即便那会使得编写过程更难。要想轻松写代码，先让代码易读吧。"}]]}],["$","h1",null,{"className":"content-header","id":"2-有意义的命名","children":[["$","a",null,{"className":"break-words","href":"#2-有意义的命名","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"2. 有意义的命名"]}],["$","ol",null,{"children":[["$","li",null,{"children":"名副其实 如果名称需要注释来补充，那就不算名副其实。"}],["$","li",null,{"children":"避免引导 避免留下掩藏代码本意的错误线索。"}],["$","li",null,{"children":["做有意义的区分 假设你有一个",["$","code",null,{"children":"Product"}],"类。如果还有一个",["$","code",null,{"children":"ProductInfo"}],"或",["$","code",null,{"children":"ProductData"}],"类，那他们的名称虽然不同，意义却无区别。",["$","code",null,{"children":"Info"}],"和",["$","code",null,{"children":"Data"}],"就像",["$","code",null,{"children":"a"}],"、",["$","code",null,{"children":"an"}],"和",["$","code",null,{"children":"the"}],"一样，是意义含混的废话。 废话都是冗余。",["$","code",null,{"children":"Variable"}],"一词永远不应当出现在变量名中。",["$","code",null,{"children":"Table"}],"一词永远不应当出现在表名中。"]}],["$","li",null,{"children":"使用读得出来的名称 不要傻乎乎的自造词，使用恰当的英语单词命名。"}],["$","li",null,{"children":"使用可搜索的名称 单字母名称和数字常量很难被搜索到。 长名称更易于被搜索到，名称长短应与其作用域大小相对应。"}],["$","li",null,{"children":"类名 类名和对象名应该是名词或名词短语。类名不应当是动词。"}],["$","li",null,{"children":["方法名 方法名应当是动词或动词短语，并加上",["$","code",null,{"children":"get"}],"、",["$","code",null,{"children":"set"}],"和",["$","code",null,{"children":"is"}],"前缀。"]}],["$","li",null,{"children":["每个概念对应一个词 给每个抽象概念选一个词，并且一以贯之。 函数名称应当独一无二，而且要保持一致。例如：一堆代码中有",["$","code",null,{"children":"controller"}],"，又有",["$","code",null,{"children":"manager"}],"还有",["$","code",null,{"children":"driver"}],"，就会让人困惑。"]}],["$","li",null,{"children":"别用双关语 应遵循“一词一义”规则。 我们想要那种大众化的作者尽责写清楚的平装书模式；我们不想要那种学者挖地三尺才能明白个中意义的学院派模式。"}],["$","li",null,{"children":["添加有意义的语境 可以添加前缀",["$","code",null,{"children":"addrFirstName"}],"、",["$","code",null,{"children":"addrLastName"}],"、",["$","code",null,{"children":"addrState"}],"等，以此提供语境。"]}],["$","li",null,{"children":"不要添加没用的语境 只要短名称足够清楚，就要比长名称好。别给名称添加不必要的语境。"}]]}],["$","h1",null,{"className":"content-header","id":"3-函数","children":[["$","a",null,{"className":"break-words","href":"#3-函数","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"3. 函数"]}],["$","ol",null,{"children":[["$","li",null,{"children":["在编程的早年岁月，系统由程序和子程序组成。后来，在",["$","code",null,{"children":"Fortran"}],"和",["$","code",null,{"children":"PL/1"}],"的年代，系统由程序、子程序和函数组成。如今，只有函数存活下来。函数是所有程序中的第一组代码。"]}],["$","li",null,{"children":["短小 (1) 函数的第一规则是要短小。 (2) 函数不应有100行那么长，20行封顶最佳。 (3) ",["$","code",null,{"children":"if"}],"语句、",["$","code",null,{"children":"else"}],"语句、",["$","code",null,{"children":"while"}],"语句等，其中的代码块应该只有一行。该行大抵应该是一个函数调用语句。这样不但能保持函数短小，而且，因为块内调用的函数拥有较具说明性的名称，从而增加了文档上的价值。 (4) 函数不应该大到足以容纳嵌套结构。所以，函数的缩进层级不该多于一层或两层。"]}],["$","li",null,{"children":"只做一件事 函数应该做一件事。做好这件事。只做这件事。"}]]}],["$","blockquote",null,{"children":["$","p",null,{"children":"如果函数只是做了该函数名下同一抽象层上的步骤，则函数还是只做了一件事。编写函数毕竟是为了把大一些的概念(换言之，函数的名称)拆分为另一抽象层上的一系列步骤。"}]}],["$","ol",null,{"start":"4","children":[["$","li",null,{"children":"每个函数一个抽象层级 要确保函数只做一件事，函数中的语句都要在同一抽象层级上。这是保持函数短小，确保只做一件事的要诀。 函数中混杂不同抽象层级，往往让人迷惑。读者可能无法判断某个表达式是基础概念还是细节。"}],["$","li",null,{"children":[["$","code",null,{"children":"switch"}],"语句 写出短小的",["$","code",null,{"children":"switch"}],"语句很难。写出只做一件事的",["$","code",null,{"children":"switch"}],"语句也很难。 ",["$","code",null,{"children":"switch"}],"天生要做",["$","code",null,{"children":"N"}],"件事，我们可以利用多态确保每个",["$","code",null,{"children":"switch"}],"都埋藏在较低的抽象层级，并且永不重复。 对于",["$","code",null,{"children":"switch"}],"语句，如果只出现一次，用于创建多态对象，而且隐藏在某个继承关系中，在系统其他部分看不到，就还能容忍。"]}],["$","li",null,{"children":"使用描述性的名称 长而具有描述性的名称，要比短而令人费解的名称好。长而具有描述性的名称，要比描述性的长注释好。"}],["$","li",null,{"children":"函数参数 零参数函数最理想，其次是单参数函数，再次是双参数函数，应尽量避免三参数函数，有足够的理由才能用多(三个以上)参数函数。 标识函数丑陋不堪。这样做，方法签名立刻变得复杂起来，大声宣布本函数不止做一件事。 如果函数看来需要两个、三个或三个以上参数，就说明其中一些函数应该封装为类了。"}],["$","li",null,{"children":"无副作用 函数承诺只做一件事，但还是会做其他被藏起来的事，产生副作用。"}],["$","li",null,{"children":"分隔指令与询问 函数要么做什么事，要么回答什么事，但二者不应该得兼。"}],["$","li",null,{"children":"使用异常替代返回错误码"}],["$","li",null,{"children":["抽离",["$","code",null,{"children":"Try/Catch"}],"代码块 最好把",["$","code",null,{"children":"try"}],"和",["$","code",null,{"children":"catch"}],"代码块的主体部分抽离出来，另外形成函数。"]}],["$","li",null,{"children":"如何写函数 写代码像写文章，一开始都冗长而复杂，然后打磨这些代码，分解函数、修改名称、消除重复。"}],["$","li",null,{"children":"小结 大师级程序员把系统当作故事来讲，而不是当做程序来写。函数的目标在于讲述系统的故事，你编写的函数必须干净利落地拼装到一起，形成一种准确而清晰的语言。"}]]}],["$","h1",null,{"className":"content-header","id":"4-注释","children":[["$","a",null,{"className":"break-words","href":"#4-注释","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"4. 注释"]}],["$","ol",null,{"children":[["$","li",null,{"children":["注释并不像幸德勒的名单。他们并不“纯然地好”。实际上，注释最多也就是一种必须的恶。注释的恰当用法是弥补我们在用代码表达意图时遭遇的",["$","strong",null,{"children":"失败"}],"。"]}],["$","li",null,{"children":"我为什么要极力贬低注释？因为注释会撒谎。注释存在的时间越久，就离其所描述的代码越远，因为程序员不能坚持维护注释。"}],["$","li",null,{"children":"不准确的注释要比没注释坏得多。他们满口胡言。只有代码能忠实地告诉你它做的事。那是唯一真正准确的信息来源。"}],["$","li",null,{"children":"注释不能美化糟糕的代码 带有少量注释的整洁而有表达力的代码，要比带有大量注释的零碎而复杂的代码像样得多。与其花时间编写解释你搞出的糟糕的代码的注释，不如花时间清洁那堆糟糕的代码。"}],["$","li",null,{"children":["好注释 有些注释是必须的，也是有利的。例如：法律信息、提供信息的注释、对意图的解释、阐释、警示、",["$","code",null,{"children":"TODO"}],"注释、放大等等。"]}],["$","li",null,{"children":"坏注释 坏注释都是糟糕代码的支撑或借口。例如：喃喃自语、多余、误导性、循规式、日志式、废话、能用变量或函数时、位置标记、括号后面的注释、归属和署名、注释掉的代码、信息过多等等。"}]]}],["$","h1",null,{"className":"content-header","id":"5-格式","children":[["$","a",null,{"className":"break-words","href":"#5-格式","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"5. 格式"]}],["$","ol",null,{"children":[["$","li",null,{"children":"保持良好的代码格式，选用一套管理代码格式的简单规则，使用格式规则的自动化工具。"}],["$","li",null,{"children":"代码格式关乎沟通，而沟通是专业开发者的头等大事，而不是“让代码能工作”。"}],["$","li",null,{"children":"今天编写的代码，极有可能在下一版本被修改，代码的可读性会对以后可能发生的修改行为产生深远影响。原始代码修改之后很久，其代码风格和可读性仍会影响到可维护性和扩展性。即使代码不复存在，你的风格和律条存活下来。"}],["$","li",null,{"children":"用大多数为200行、最长500行的单个文件构造出色的系统。"}],["$","li",null,{"children":"向报纸学习 源文件最顶部应该给出高层次概念和算法。细节应该往下依次展开，直到找到源文件中最底层的该函数和细节。"}],["$","li",null,{"children":"概念间垂直方向上的区隔 在封包声明、导入声明和每个函数之间，都有空白行隔开。"}],["$","li",null,{"children":"垂直方向上的靠近 如果说空白行隔开了概念，靠近的代码行则暗示了他们之间的紧密关系。"}],["$","li",null,{"children":"垂直距离 (1) 关系紧密的概念应该互相靠近。 (2) 变量声明应尽可能靠近其使用位置。 (3) 如果某个函数调用另一个，应该把他们放到一起。 (4) 概念相关的代码应该放到一起。"}],["$","li",null,{"children":"垂直顺序 被调用的函数应该放在执行调用的函数下面。"}],["$","li",null,{"children":"应该尽力保持代码短小。 遵循无需拖动滚动条到右边的原则。"}],["$","li",null,{"children":["水平方向的间隔和靠近 (1) 赋值操作符(",["$","code",null,{"children":"="}],")周围加空格。 (2) 函数名和左小括号(",["$","code",null,{"children":"("}],")之间不加空格。 (3) 函数小括号中参数一一隔开。"]}]]}],["$","h1",null,{"className":"content-header","id":"6-对象和数据结构","children":[["$","a",null,{"className":"break-words","href":"#6-对象和数据结构","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"6. 对象和数据结构"]}],["$","ol",null,{"children":[["$","li",null,{"children":"数据抽象 隐藏实现，通过暴露抽象接口，以便用户无需了解数据的实现就能操作数据本体。"}],["$","li",null,{"children":"数据、对象的反对称性"}]]}],["$","p",null,{"children":"(1)对象把数据隐藏于抽象之后，暴露操作数据的函数。数据结构暴露其数据，没有提供有意义的函数。 (2) 代码演示 过程式代码便于在不改动既有数据结构的前提下添加新函数；难以添加新数据结构(子类)，因为必须修改所有函数。"}],["$","$L15",null,{"className":"language-js","children":["$","code",null,{"className":"language-js code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"class"}]," ",["$","span",null,{"className":"token class-name","children":"Square"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  topLeft",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  side",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"class"}]," ",["$","span",null,{"className":"token class-name","children":"Rectangle"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  topLeft",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  height",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  width",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"class"}]," ",["$","span",null,{"className":"token class-name","children":"Circle"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  center",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  radius",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"class"}]," ",["$","span",null,{"className":"token class-name","children":"Geometry"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token constant","children":"PI"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"3.1415926"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":"  \n"}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token function","children":"area"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token parameter","children":"shape"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword control-flow","children":"if"}],["$","span",null,{"className":"token punctuation","children":"("}],"shape ",["$","span",null,{"className":"token keyword","children":"instanceof"}]," ",["$","span",null,{"className":"token class-name","children":"Square"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token keyword control-flow","children":"return"}]," shape",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token property-access","children":"side"}]," ",["$","span",null,{"className":"token operator","children":"*"}]," shape",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token property-access","children":"side"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token punctuation","children":"}"}]," ",["$","span",null,{"className":"token keyword control-flow","children":"else"}]," ",["$","span",null,{"className":"token keyword control-flow","children":"if"}]," ",["$","span",null,{"className":"token punctuation","children":"("}],"shape ",["$","span",null,{"className":"token keyword","children":"instanceof"}]," ",["$","span",null,{"className":"token class-name","children":"Rectangle"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token keyword control-flow","children":"return"}]," shape",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token property-access","children":"width"}]," ",["$","span",null,{"className":"token operator","children":"*"}]," shape",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token property-access","children":"height"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token punctuation","children":"}"}]," ",["$","span",null,{"className":"token keyword control-flow","children":"else"}]," ",["$","span",null,{"className":"token keyword control-flow","children":"if"}],["$","span",null,{"className":"token punctuation","children":"("}],"shape ",["$","span",null,{"className":"token keyword","children":"instanceof"}]," ",["$","span",null,{"className":"token class-name","children":"Circle"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["      ",["$","span",null,{"className":"token keyword control-flow","children":"return"}]," ",["$","span",null,{"className":"token keyword","children":"this"}],["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token constant","children":"PI"}]," ",["$","span",null,{"className":"token operator","children":"*"}]," shape",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token property-access","children":"radius"}]," ",["$","span",null,{"className":"token operator","children":"*"}]," shape",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token property-access","children":"radius"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],["$","p",null,{"children":"面向对象代码便于在不改动既有函数的前提下添加新类；难以添加新函数，因为必须修改所有类。"}],["$","$L15",null,{"className":"language-js","children":["$","code",null,{"className":"language-js code-highlight","children":[["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"class"}]," ",["$","span",null,{"className":"token class-name","children":"Shape"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token function","children":"area"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"class"}]," ",["$","span",null,{"className":"token class-name","children":"Square"}]," ",["$","span",null,{"className":"token keyword","children":"extends"}]," ",["$","span",null,{"className":"token class-name","children":"Shape"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  topLeft",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  side",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token function","children":"area"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token parameter","children":"shape"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword control-flow","children":"return"}]," shape",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token property-access","children":"side"}]," ",["$","span",null,{"className":"token operator","children":"*"}]," shape",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token property-access","children":"side"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"class"}]," ",["$","span",null,{"className":"token class-name","children":"Rectangle"}]," ",["$","span",null,{"className":"token keyword","children":"extends"}]," ",["$","span",null,{"className":"token class-name","children":"Shape"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  topLeft",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  height",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  width",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token function","children":"area"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token parameter","children":"shape"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword control-flow","children":"return"}]," shape",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token property-access","children":"width"}]," ",["$","span",null,{"className":"token operator","children":"*"}]," shape",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token property-access","children":"height"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token keyword","children":"class"}]," ",["$","span",null,{"className":"token class-name","children":"Circle"}]," ",["$","span",null,{"className":"token keyword","children":"extends"}]," ",["$","span",null,{"className":"token class-name","children":"Shape"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  center",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  radius",["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":"  \n"}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token constant","children":"PI"}]," ",["$","span",null,{"className":"token operator","children":"="}]," ",["$","span",null,{"className":"token number","children":"3.1415926"}],["$","span",null,{"className":"token punctuation","children":";"}],"\n"]}],["$","span",null,{"className":"code-line","children":"\n"}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token function","children":"area"}],["$","span",null,{"className":"token punctuation","children":"("}],["$","span",null,{"className":"token parameter","children":"shape"}],["$","span",null,{"className":"token punctuation","children":")"}]," ",["$","span",null,{"className":"token punctuation","children":"{"}],"\n"]}],["$","span",null,{"className":"code-line","children":["    ",["$","span",null,{"className":"token keyword control-flow","children":"return"}]," ",["$","span",null,{"className":"token keyword","children":"this"}],["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token constant","children":"PI"}]," ",["$","span",null,{"className":"token operator","children":"*"}]," shape",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token property-access","children":"radius"}]," ",["$","span",null,{"className":"token operator","children":"*"}]," shape",["$","span",null,{"className":"token punctuation","children":"."}],["$","span",null,{"className":"token property-access","children":"radius"}],"\n"]}],["$","span",null,{"className":"code-line","children":["  ",["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}],["$","span",null,{"className":"code-line","children":[["$","span",null,{"className":"token punctuation","children":"}"}],"\n"]}]]}]}],["$","p",null,{"children":["(3) 在复杂系统中，当需要添加新数据类型而不是新函数时，面向对象更合适。当需要添加新函数而不是数据类型时，过程式代码更合适。 3. 德墨忒尔律 方法不应调用任何函数返回的对象的方法。 下面代码违反了德墨忒尔律： ",["$","code",null,{"children":"const outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath()"}]," 这类代码被称作火车失事，最好做如下切分： ",["$","code",null,{"children":"const opts = ctxt.getOptions()"}]," ",["$","code",null,{"children":"const scratchDir = opts.getScratchDir()"}]," ",["$","code",null,{"children":"const outputDir = scratchDir.getAbsolutePath()"}]," 以上代码是否违反德墨忒尔律取决于",["$","code",null,{"children":"opts"}],"、",["$","code",null,{"children":"scratchDir"}],"、",["$","code",null,{"children":"outputDir"}],"是对象还是数据结构，如果只是数据结构，没有任何行为，德墨忒尔律就不适用了。"]}],["$","blockquote",null,{"children":["$","p",null,{"children":"只跟朋友谈话，不与陌生人谈话。"}]}],["$","ol",null,{"start":"4","children":["$","li",null,{"children":"对象暴露行为，隐藏数据。便于添加新对象类型而无需修改既有行为，同时也难以在既有对象中添加新行为。数据结构暴露数据，没有明显的行为。便于向既有数据结构添加新行为，同时也难以向既有函数添加新数据结构。"}]}],["$","h1",null,{"className":"content-header","id":"7-错误处理","children":[["$","a",null,{"className":"break-words","href":"#7-错误处理","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"7. 错误处理"]}],["$","ol",null,{"children":[["$","li",null,{"children":"错误处理很重要，但如果它搞乱了代码逻辑，就是错误的做法。"}],["$","li",null,{"children":"使用异常而非返回码 使用返回码错误标识搞乱了调用者代码。调用者必须在调用之后立即检查错误，并且这个步骤很容易被遗忘。 遇到错误时，最好抛出一个异常。调用代码很整洁，逻辑不会被错误处理搞乱。"}],["$","li",null,{"children":["先写",["$","code",null,{"children":"Try - Catch - Finally"}],"语句 异常的妙处之一是，他们在程序中定义了一个范围。执行",["$","code",null,{"children":"Try - Catch - Finally"}],"语句中",["$","code",null,{"children":"try"}],"部分的代码时，你是在表明可随时取消执行，并在",["$","code",null,{"children":"catch"}],"语句中接续。"]}],["$","li",null,{"children":["别返回",["$","code",null,{"children":"null"}],"值 如果你打算在方法中返回",["$","code",null,{"children":"null"}],"值，不如抛出异常，或是返回特例对象。这样编码，就能尽量避免",["$","code",null,{"children":"NullPointerException"}],"的出现。"]}],["$","li",null,{"children":["别传递",["$","code",null,{"children":"null"}],"值 在方法中返回",["$","code",null,{"children":"null"}],"值是糟糕的做法，但将",["$","code",null,{"children":"null"}],"值传递给其他方法就更糟糕了。除非",["$","code",null,{"children":"API"}],"要求你向它传递",["$","code",null,{"children":"null"}],"值，否则就要尽可能避免传递",["$","code",null,{"children":"null"}],"值。"]}],["$","li",null,{"children":"整洁代码是可读的，但也要强固。可读和强固并不冲突。如果将错误处理隔离看待，独立于主要逻辑之外，就能写出强固而整洁的代码。"}]]}],["$","h1",null,{"className":"content-header","id":"8-边界","children":[["$","a",null,{"className":"break-words","href":"#8-边界","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"8. 边界"]}],["$","ol",null,{"children":[["$","li",null,{"children":"在接口提供者和使用者之间，存在与生俱来的张力。第三方框架提供者追求普适性，这样就能在多个环境中工作，吸引广泛的用户。而使用则想要集中满足特定需求的接口。这种张力会导致系统边界上出现问题。"}],["$","li",null,{"children":"边界上的代码需要清晰的分割和定义了期望的测试。应该避免我们的代码过多地了解第三方代码中的特定信息。"}]]}],["$","h1",null,{"className":"content-header","id":"9-单元测试","children":[["$","a",null,{"className":"break-words","href":"#9-单元测试","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"9. 单元测试"]}],["$","ol",null,{"children":[["$","li",null,{"children":[["$","code",null,{"children":"TDD"}],"三定律 定律一：在编写不能通过的单元测试前，不可编写生产代码。 定律二：只可编写刚好无法通过的单元测试，不能编译也算不通过。 定律三：只可编写刚好足以通过当前失败测试的生产代码。 测试与生产代码一起编写，测试只比生产代码早写几秒钟。"]}],["$","li",null,{"children":"测试代码和生产代码一样重要。它可不是二等公民。它需要被思考、被设计和被照料。它该像生产代码一般保持整洁。"}],["$","li",null,{"children":"覆盖了生产代码的自动化单元测试程序组能尽可能地保持设计和架构的整洁。测试代码应明确，简洁，还有足够的表达力。"}],["$","li",null,{"children":[["$","code",null,{"children":"F-I-R-S-T"}]," (1) 快速(",["$","code",null,{"children":"Fast"}],") 测试应该够快。 (2) 独立(",["$","code",null,{"children":"Independent"}],") 测试应该相互独立。你应该可以单独运行每个测试，及以任何顺序运行测试。 (3) 可重复(",["$","code",null,{"children":"Repeatable"}],") 测试应当可在任何环境中重复通过。 (4) 自足验证(",["$","code",null,{"children":"Self-Validating"}],") 测试应该由布尔值输出。 (5) 及时(",["$","code",null,{"children":"Timely"}],") 测试应及时编写。单元测试应该恰好在使其通过的生产代码之前编写。"]}]]}],["$","h1",null,{"className":"content-header","id":"10-类","children":[["$","a",null,{"className":"break-words","href":"#10-类","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"10. 类"]}],["$","ol",null,{"children":[["$","li",null,{"children":"类应该短小 关于类的第一条规则是类应该短小。"}],["$","li",null,{"children":["我们以",["$","strong",null,{"children":"权责"}],"来衡量类的大小 类的名称应当描述其权责。如果无法为某个类命以精确的名称，这个类大概就太长了。类名越含混，该类越有可能拥有过多权责。例如：如果类名中包括含义模糊的词，如",["$","code",null,{"children":"Process"}],"或",["$","code",null,{"children":"Manager"}],"或",["$","code",null,{"children":"Super"}],"，这种现象往往说明有不恰当的权责聚集情况出现。"]}],["$","li",null,{"children":["单一权责原则(",["$","code",null,{"children":"SRP"}],") 单一权责原则认为，类或模块应有且只有一条加以修改的理由。类只应有一个权责——只有一条修改的理由。 ",["$","code",null,{"children":"SRP"}],"是",["$","code",null,{"children":"OO"}],"设计中最为重要的概念之一，也是最容易被破坏的类设计原则。"]}],["$","li",null,{"children":"让软件能工作和让软件保持整洁，是两种截然不同的工作。我们中的大多数人脑力有限，只能更多地把精力放在让代码能工作上，而不是放在保持代码有组织和整洁上。"}],["$","li",null,{"children":"大多人在程序能工作时就以为万事大吉了。没能把思维转向有关代码组织和整洁的部分。不再回头将臃肿的类切分为只有单一权责的去耦式单元。"}],["$","li",null,{"children":"系统应该由许多短小的类而不是少量巨大的类组成。每个小类封装一个权责，只有一个修改的原因，并与少数其他类一起协同达成期望的系统行为。"}],["$","li",null,{"children":[["$","strong",null,{"children":"内聚"}]," ① 类应该只有少量实体变量。 ② 类中每个方法都应该操作一个或多个这种变量。 ③ 通常而言，方法操作的变量越多，就越粘聚到类上。 ④ 如果一个类中的每个变量都被每个方法所使用，则该类具有最大的内聚性。 ⑤ 内聚性高，意味着类中的方法和变量互相依赖、互相结合成一个逻辑整体。 ⑥ 我们希望类保持较高的内聚性。 ⑦ 将较大的函数切割为小函数，为保持内聚性，就会得到许多短小的类。"]}]]}],["$","h1",null,{"className":"content-header","id":"11-系统","children":[["$","a",null,{"className":"break-words","href":"#11-系统","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"11. 系统"]}],["$","ol",null,{"children":[["$","li",null,{"children":"复杂要人命。它消磨开发者的声明，让产品难以规划、构建和测试。"}],["$","li",null,{"children":"软件系统应将启动过程和启动过程之后的运行时逻辑分离开，在启动过程中构建应用对象，也会存在互相缠结的依赖关系。每个应用程序都该留意启始过程。"}],["$","li",null,{"children":"一开始就做对系统纯属神话。我们应该只去实现今天的用户故事，然后重构，明天再扩展系统、实现新的用户故事。"}],["$","li",null,{"children":"无论是设计系统或单独的模块，别忘了使用大概可工作的最简单方案。"}]]}],["$","h2",null,{"className":"content-header","id":"12-迭进","children":[["$","a",null,{"className":"break-words","href":"#12-迭进","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"12. 迭进"]}],["$","ol",null,{"children":[["$","li",null,{"children":"假使有4条简单的规矩，跟着做就能帮助你创建优良的设计。 ① 运行所有测试。 ② 不可重复。 ③ 表达了程序员的意图。 ④ 尽可能减少类和方法的数量。"}],["$","li",null,{"children":"测试消除了对清理代码就会破坏代码的恐惧。"}],["$","li",null,{"children":"消除重复 ① 重复是拥有良好设计系统的大敌。 ② 重复代表着额外的工作、额外的风险和额外且不必要的复杂度。 ③ 要想创建整洁的系统，需要有消除重复的意愿，即使只有短短几行。"}],["$","li",null,{"children":["保证表达力 ① 大多数人都经历过费解代码的纠缠。大多数人都编写过费解的代码。 ② 软件项目的主要成本在于长期维护。把代码写的越清晰，其他人花在理解代码上的时间也就越少，从而减少缺陷，缩短维护成本。 ③ 可以通过好名称、保持函数和类尺寸短小、标准命名法、编写良好的测试来表达。 ④ 做到有表达力的最重要方式即是尝试。 ⑤ ",["$","strong",null,{"children":"时时照拂自己创建的东西。用心最珍贵的资源。"}]]}],["$","li",null,{"children":"尽可能减少类和方法 ① 保持类和函数短小。 ② 主张类和函数数量要少。"}]]}],["$","h1",null,{"className":"content-header","id":"13-并发编程","children":[["$","a",null,{"className":"break-words","href":"#13-并发编程","aria-hidden":"true","tabIndex":"-1","children":["$","span",null,{"className":"content-header-link","children":["$","svg",null,{"className":"h-5 linkicon w-5","fill":"currentColor","viewBox":"0 0 20 20","xmlns":"http://www.w3.org/2000/svg","children":[["$","path",null,{"d":"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"}],["$","path",null,{"d":"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"}]]}]}]}],"13. 并发编程"]}],["$","ol",null,{"children":[["$","li",null,{"children":"对象是过程的抽象。线程是调度的抽象。"}],["$","li",null,{"children":["并发是一种解耦策略。它帮助我们把",["$","strong",null,{"children":["做什么(目的)",["$","strong",null,{"children":"和"}],"何时(时机)做"]}],"分解开。在单线程应用中，目的和时机紧密耦合，很多时候只要查看堆栈追踪即可断定应用程序的状态。"]}],["$","li",null,{"children":"解耦目的与时机能明显地改进应用程序的吞吐量和结构。从结构的角度来看，应用程序看起来更像是许多台协同工作的计算机，而不是一个大循环。"}],["$","li",null,{"children":"关于并发 ① 并发会在性能和编写额外代码上增加一些开销。 ② 正确的并发是复杂的，即便对于简单的问题也是如此。 ③ 并发缺陷并非总能重现，所以常被看做偶发事件而忽略，未被当做真的缺陷看待。 ④ 并发常常需要对设计策略的根本性修改。"}],["$","li",null,{"children":["单一权责原则。 单一权责原则(",["$","code",null,{"children":"SRP"}],")认为，方法/类/组件应当只有一个修改的理由。 并发设计自身足够复杂到成为修改的理由。 建议：分离并发相关代码和其他代码。"]}]]}]]}]}],["$","div",null,{"className":"pt-6 pb-6 text-center text-gray-700 dark:text-gray-300","id":"comment","children":["$","$L16",null,{"slug":"代码质量/《Clean-Code》--原则、模式和实践"}]}],["$","footer",null,{"children":["$","div",null,{"className":"flex flex-col text-sm font-medium sm:flex-row sm:justify-between sm:text-base","children":[["$","div",null,{"className":"pt-4 xl:pt-8","children":["$","$L5",null,{"className":"text-primary-500 hover:text-primary-600 dark:hover:text-primary-400","href":"/blog/React/React生态圈","aria-label":"Previous post: React生态圈","children":["← ","React生态圈"]}]}],["$","div",null,{"className":"pt-4 xl:pt-8","children":["$","$L5",null,{"className":"text-primary-500 hover:text-primary-600 dark:hover:text-primary-400","href":"/blog/Tools/Charles工具简单使用","aria-label":"Next post: Charles工具简单使用","children":["Charles工具简单使用"," →"]}]}]]}]}]]}]]}]}]]}]]
10:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
d:null
e:null
12:[["$","title","0",{"children":"《Clean-Code》--原则、模式和实践 | 我的博客"}],["$","meta","1",{"name":"description","content":"《Clean-Code》--原则、模式和实践相关文章"}],["$","meta","2",{"name":"robots","content":"index, follow"}],["$","meta","3",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","4",{"rel":"canonical","href":"https://nmwei.github.io/blog/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/%E3%80%8AClean-Code%E3%80%8B--%E5%8E%9F%E5%88%99%E3%80%81%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%AE%9E%E8%B7%B5"}],["$","link","5",{"rel":"alternate","type":"application/rss+xml","href":"https://nmwei.github.io/feed.xml"}],["$","meta","6",{"property":"og:title","content":"《Clean-Code》--原则、模式和实践"}],["$","meta","7",{"property":"og:description","content":"《Clean-Code》--原则、模式和实践相关文章"}],["$","meta","8",{"property":"og:url","content":"https://nmwei.github.io/blog/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/%E3%80%8AClean-Code%E3%80%8B--%E5%8E%9F%E5%88%99%E3%80%81%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%AE%9E%E8%B7%B5"}],["$","meta","9",{"property":"og:site_name","content":"我的博客"}],["$","meta","10",{"property":"og:locale","content":"en_US"}],["$","meta","11",{"property":"og:image","content":"https://nmwei.github.io/static/images/code-quality.jpg"}],["$","meta","12",{"property":"og:type","content":"article"}],["$","meta","13",{"property":"article:published_time","content":"2018-12-27T00:00:00.000Z"}],["$","meta","14",{"property":"article:modified_time","content":"2018-12-27T00:00:00.000Z"}],["$","meta","15",{"property":"article:author","content":"倪梦威"}],["$","meta","16",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","17",{"name":"twitter:title","content":"《Clean-Code》--原则、模式和实践"}],["$","meta","18",{"name":"twitter:description","content":"《Clean-Code》--原则、模式和实践相关文章"}],["$","meta","19",{"name":"twitter:image","content":"https://nmwei.github.io/static/images/code-quality.jpg"}]]
